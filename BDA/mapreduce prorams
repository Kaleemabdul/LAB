
/* Word count

***************************************
package com.sample;



import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.Text;

public class WordCountCombiner extends Reducer<Text,LongWritable,Text,LongWritable> 
{
	@Override
	protected void reduce(Text key,Iterable<LongWritable> value,Context context)throws IOException,InterruptedException
	{
		long sum=0;
		while(value.iterator().hasNext())
		{
			sum+=value.iterator().next().get();
		}
		context.write(key,new LongWritable(sum));
	}
	
	

}


 ***************************************

package com.sample;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
//import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.util.Tool;
public class WordCountJob implements Tool{
	private Configuration conf;
	@Override
	public Configuration getConf()
	{
	return conf;
	}
	@Override
	public void setConf(Configuration conf)
	{
		this.conf=conf;
	}
	@Override
	public int run(String []args)throws Exception
	{
		
		Job wordcountjob=new Job(getConf());
		wordcountjob.setJobName("mat word count");
		wordcountjob.setJarByClass(this.getClass());
		wordcountjob.setMapperClass(WordCountMapper.class);
		wordcountjob.setReducerClass(WordCountReducer.class);
		wordcountjob.setCombinerClass(WordCountCombiner.class);
		
		wordcountjob.setMapOutputKeyClass(Text.class);
		wordcountjob.setMapOutputValueClass(LongWritable.class);
		wordcountjob.setOutputKeyClass(Text.class);
		wordcountjob.setOutputValueClass(LongWritable.class);
		FileInputFormat.setInputPaths(wordcountjob,new Path(args[0]));
		FileOutputFormat.setOutputPath(wordcountjob,new Path(args[1]));
		wordcountjob.setNumReduceTasks(2);
		return wordcountjob.waitForCompletion(true)==true? 0:1;
	}
	public static void main(String []args)throws Exception
	{
		ToolRunner.run(new Configuration(),new WordCountJob(),args);
	}

}

***************************************
package com.sample;

import java.io.IOException;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

//import org.apache.hadoop.mapreduce.Counter;
public class WordCountMapper extends
		Mapper<LongWritable, Text, Text, LongWritable> {
	
	private final static LongWritable one = new LongWritable(1);

	@Override
	protected void map(LongWritable key, Text value, Context context)
			throws IOException, InterruptedException {
		String line = value.toString();
		String[] words = line.split(" ");
		for (int i = 0; i < words.length; i++) {
			context.write(new Text(words[i]), one);
		}
		/*StringTokenizer strtock = new StringTokenizer(str);
		while (strtock.hasMoreTokens()) {
			temp.set(strtock.nextToken());
			context.write(temp, one);
		}*/
	}

}

***************************************
package com.sample;


import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.Text;

public class WordCountReducer extends Reducer<Text,LongWritable,Text,LongWritable> 
{
	@Override
	protected void reduce(Text key,Iterable<LongWritable> value,Context context)throws IOException,InterruptedException
	{
		long sum=0;
		while(value.iterator().hasNext())
		{
			sum+=value.iterator().next().get();
		}
		context.write(key,new LongWritable(sum));
	}
	
	

}
